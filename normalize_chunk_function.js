// n8n Function node: Normalize → Chunk → Hash (md/txt/vtt/srt)
const crypto = require('crypto');
function toUtf8(item){const b=item.binary?.data?.data;return b?Buffer.from(b,'base64').toString('utf8'):''}
function stripMarkdownKeepHeadings(s){s=s.replace(/```[\s\S]*?```/g,' ');s=s.replace(/!\[[^\]]*\]\([^)]+\)/g,' ');s=s.replace(/\[([^\]]+)\]\(([^)]+)\)/g,'$1');s=s.replace(/<[^>]+>/g,' ');return s}
function stripVTTorSRT(s){s=s.replace(/^WEBVTT[^\n]*\n/gi,'');s=s.replace(/^\d+\s*$/gm,'');s=s.replace(/\d{1,2}:\d{2}:\d{2}(?:[.,]\d{1,3})?\s*-->\s*\d{1,2}:\d{2}:\d{2}(?:[.,]\d{1,3})?.*$/gm,'');s=s.replace(/\d{1,2}:\d{2}\s*-->\s*\d{1,2}:\d{2}.*$/gm,'');return s}
function detectKind(filename,text){const f=(filename||'').toLowerCase();if(f.endsWith('.md'))return'md';if(f.endsWith('.vtt'))return'vtt';if(f.endsWith('.srt'))return'srt';if(f.endsWith('.txt'))return'txt';if(/^webvtt/i.test(text))return'vtt';if(/\d+\s*\n\d{2}:\d{2}:\d{2}/.test(text))return'srt';if(/#\s+/.test(text))return'md';return'txt'}
function normalize(filename,raw){let t=raw.replace(/\r/g,'').trim();const kind=detectKind(filename,t);if(kind==='vtt'||kind==='srt')t=stripVTTorSRT(t);if(kind==='md')t=stripMarkdownKeepHeadings(t);t=t.replace(/[ \t]+/g,' ').replace(/\n{3,}/g,'\n\n');return{kind,text:t}}
function currentHeadingPath(lines,idx){const path=[];for(let i=idx;i>=0&&path.length<10;i--){const m=lines[i].match(/^(#{1,6})\s+(.*)$/);if(m)path.unshift(m[2].trim())}return path.join(' > ')}
function detectSpeaker(line){const m=line.match(/^([A-Za-z][A-Za-z ._-]{1,30}):\s+/);return m?m[1].trim():null}
function chunkWithContext(text,maxChars=2000,overlap=300){const out=[],lines=text.split('\n');let flat='',starts=[];for(let i=0;i<lines.length;i++){starts.push({pos:flat.length,lineIndex:i});flat+=lines[i].trimEnd()+'\n'}let i=0,idx=0;while(i<flat.length){const startPos=i,endPos=Math.min(i+maxChars,flat.length);const slice=flat.slice(startPos,endPos);let lineIdx=0;for(let k=0;k<starts.length;k++){if(starts[k].pos<=startPos)lineIdx=starts[k].lineIndex;else break}const topic_path=currentHeadingPath(lines,lineIdx)||'';const firstLine=slice.split('\n').find(x=>x.trim().length>0)||'';const speaker=detectSpeaker(firstLine);out.push({chunk_index:idx++,topic_path,speaker:speaker||null,content:slice.trim(),tokens:slice.length});i+=(maxChars-overlap)}return out}
const filename=$json.filename||$json.name||'upload.txt';const raw=toUtf8(items[0]);const{kind,text}=normalize(filename,raw);const hash=require('crypto').createHash('sha256').update(text).digest('hex');const mTitle=text.match(/^#\s+(.*)$/m);const stream_title=mTitle?mTitle[1].trim():null;const mDate=text.match(/\b(20\d{2}-\d{2}-\d{2})\b/);const stream_date=mDate?mDate[1]:null;const chunks=chunkWithContext(text,2000,300);const out=[];out.push({json:{type:'source',filename,kind,doc_hash:hash,stream_title,stream_date}});for(const c of chunks)out.push({json:{type:'chunk',filename,kind,doc_hash:hash,...c}});return out;
